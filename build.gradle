buildscript {
  repositories {
	mavenCentral()
	maven {
		name = "GradleRIO"
		url = "http://dev.imjac.in/maven"
	}
  }
  dependencies {
    classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '+'			//Change this line if you wish to Update GradleRIO
  }
}

apply plugin: 'java'
dependencies {
  compile files('lib/navx_frc.jar')
}

apply plugin: 'idea'

apply plugin: 'GradleRIO'                                 //Apply the GradleRIO plugin

gradlerio.robotClass = "org.usfirst.frc.team5687.robot.Robot"   //The class for the main Robot Class. Used in manifest
gradlerio.team = "5687"                                   //The FRC team number
gradlerio.rioIP = "10.56.87.2"                            //The IP address of the RIO

def robotManifest = {
  attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
  attributes 'Robot-Class': gradlerio.robotClass
}

jar {
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  manifest robotManifest
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives genJavadoc
}

def getTimestamp = {
  def date = new Date()
  def df = "[" + date.format('hh:mm') + " " + date.format('MM-dd-yyyy') + "]"
  return df
}

task gitInfo(dependsOn: build) {
  description = 'When build, logs the branch and version to build'
  def cmd = "git rev-parse --abbrev-ref HEAD"
  project.ext.branch = cmd.execute().text.trim()
  cmd = "git rev-parse --short HEAD"
  project.ext.revision = cmd.execute().text.trim()

  println "[branch] " + project.branch
  println "[commit] " + project.revision
}

task gitLog << {
  description = 'When deploy, logs and overwrites branch and version to a log file'
  def logFile = new File('src/main/java/org/usfirst/frc/team5687/robot/utils/Reader.java')

  def cmd = "git diff HEAD --shortstat"
  def mod = cmd.execute().text.trim()
  def modified = (mod != null && mod.length() != 0) ? " *" : ""
  def br = "\n\n"
  def reader = "package org.usfirst.frc.team5687.robot.utils;" + br
  reader += "/**\n * A file reader class to read current Git information from deployed robot code\n * @author wilstenholme\n */" + br
  reader += "public class Reader {\n" + "    public static final String gitInfo = \"" + project.branch + " " + project.revision + modified + "\";\n }"
  logFile.text = reader
}
deploy.dependsOn(gitLog)